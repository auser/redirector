# Builder stage
FROM rust:1.75-slim-bullseye AS builder

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create a new empty shell project
WORKDIR /app
RUN cargo new --bin redirector
WORKDIR /app/redirector

# Copy manifests first to cache dependencies
COPY Cargo.toml Cargo.lock ./

# Build dependencies only (caching layer)
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/redirector/target \
    cargo build --release && \
    rm src/*.rs

# Copy source code
COPY src ./src/

# Build the actual application
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/redirector/target \
    cargo build --release && \
    cp target/release/redirector /app/redirector-bin

# Development stage
# Development stage
FROM rust:1.75-slim-bullseye AS development

# Install development dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    pkg-config \
    libssl-dev \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && cargo install cargo-watch

# Set up development directory
WORKDIR /app

# Create a non-root user for development with proper cargo permissions
RUN useradd -m -s /bin/bash developer && \
    mkdir -p /usr/local/cargo/registry && \
    chown -R developer:developer /app /usr/local/cargo

# Set cargo home
ENV CARGO_HOME=/usr/local/cargo
ENV RUSTUP_HOME=/usr/local/rustup

# Give developer user ownership of cargo directories
RUN chown -R developer:developer $CARGO_HOME $RUSTUP_HOME

# Switch to non-root user
USER developer

# Copy manifest files
COPY --chown=developer:developer Cargo.toml Cargo.lock ./

# Set environment variables
ENV RUST_LOG=debug
ENV RUST_BACKTRACE=1

# Expose the port the app runs on
EXPOSE 3000

# Start development server with hot reload
CMD ["cargo", "watch", "-x", "run"]

# Runtime stage
FROM debian:bullseye-slim AS runtime

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary from builder
COPY --from=builder /app/redirector-bin /usr/local/bin/redirector

# Set environment variables
ENV RUST_LOG=info

# Create a non-root user
RUN useradd -r -s /bin/false redirector

# Switch to non-root user
USER redirector

# Expose the port the app runs on
EXPOSE 3000

# Run the binary
CMD ["redirector"]